import asyncio
import random

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram import Dispatcher
import keyboards as kb
import filter
import sq_bd
from config import admin_list
from main import bot, dp
from states import Home, UpdateAnket, Anketa, ViewProfiles, ViewLikes
import re
import json
from filter import get_date


async def wait(time):
    await asyncio.sleep(time)


async def send_to_admin(dp):
    await bot.send_message(chat_id=admin_list[0], text="Bot is started")
    await sq_bd.db_connect()
    await bot.send_message(chat_id=admin_list[0], text="–ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")


####################################################################################### handlers ##################

@dp.message_handler(commands=['users'], state="*")
async def get_users_handler(message: types.Message, state: FSMContext):
    await message.answer(f"{await sq_bd.get_users()}")
    rows = sq_bd.get_filtered_date(15)
    rows2 = sq_bd.get_filtered_users("15")
    await message.answer(f"{rows}")
    await message.answer(f"{rows2}")


@dp.message_handler(commands=['test'], state="*")
async def get_users_handler(message: types.Message, state: FSMContext):
    await sq_bd.add_like(message, message.from_user.id)
    msg = await message.answer(f'<a href="tg://user?id={message.from_user.id}">qwertyui</a>')
    msg2 = await message.answer(f'href="tg://user?id={message.from_user.id}"')
    msg3 = await message.answer(f'<a href="tg://openmessage?user_id={5988050571}">qwertyui</a>')
    button_url = f'tg://openmessage?user_id={5988050571}'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='button_text', url=button_url))
    await message.answer('123', reply_markup=markup)
    print(msg)


@dp.message_handler(commands=['add_column'], state="*")
async def add_column_handler(message: types.Message, state: FSMContext):
    text = message.text.split(' ')
    if len(text) == 1:
        return None
    arg = text[1]
    await sq_bd.add_column(arg)


@dp.message_handler(commands=['message'], state="*")
async def json_message(message: types.Message, state: FSMContext):
    data = json.loads(f"{message}")
    # –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤
    pretty_json = json.dumps(data, indent=6, ensure_ascii=False)
    text = pretty_json
    await bot.send_message(admin_list[0], text=text)
    await bot.send_message(admin_list[0], text=f"{await get_date(message)}")


@dp.message_handler(commands=['users_count'], state="*")
async def users_count(message: types.Message, state: FSMContext):
    await message.answer(f"{len(await sq_bd.get_users())}")


@dp.message_handler(commands=['start'], state="*")
async def start_handler(message: types.Message, state: FSMContext):
    await sq_bd.ads_id(message.from_user.id)
    if (await state.get_state()) is not None:
        await state.finish()

    text = f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Å–æ –∑–≤—É–∫–æ–º\n/home - –ì–ª–∞–≤–Ω–∞—è\n/my_profile - –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞\n\n <a href="tg://user?id={message.from_user.id}">–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</a>"""
    await message.answer(text=text, reply_markup=await kb.start())


@dp.message_handler(lambda message: message.text in ['–ù–∞–∑–∞–¥', '–ì–ª–∞–≤–Ω–∞—è', '–û—Ç–º–µ–Ω–∞'], state="*")
async def home(message: types.Message, state: FSMContext):
    if message.text == 'üí§':
        await message.answer("–ü–æ–¥–æ–∂–¥–µ–º, –ø–æ–∫–∞ —Ç–≤–æ—é –∫—Ç–æ-—Ç–æ –Ω–µ —É—Å–ª—ã—à–∏—Ç —Ç–≤–æ–π –≥–æ–ª–æ—Å")
    await state.finish()
    await message.answer('–ì–ª–∞–≤–Ω–∞—è', reply_markup=await kb.home())
    await Home.menu.set()


async def anketa(message: types.Message, state: FSMContext):
    await message.answer('–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞')
    if await sq_bd.check_id(message.from_user.id):
        user_data = await sq_bd.get_user(message.from_user.id)
        caption = f"{user_data[1]}, {user_data[3]}"
        voice = user_data[2]
        await message.answer_voice(voice=voice, caption=caption, reply_markup=await kb.anketa())
    else:
        await message.answer('–•–º... –¢—É—Ç –ø—É—Å—Ç–æ, –Ω–∞–∂–º–∏ –Ω–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É" –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É',
                             reply_markup=await kb.anketa())
    await state.set_state(Anketa.anketa.set)
    await Anketa.anketa.set()


async def Update_anketa_1(message: types.Message, state: FSMContext):
    await message.answer('–ö–∞–∫ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?', reply_markup=await kb.cancel())
    await UpdateAnket.name.set()


async def Update_anketa_2(message: types.Message, state: FSMContext):
    text = filter.remove_tags(filter.remove_html_tags(message.text))
    await state.update_data(name=text)
    await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=await kb.cancel())
    await UpdateAnket.age.set()


async def Update_anketa_3(message: types.Message, state: FSMContext):
    if re.match("^\d\d$", message.text):
        if 10 < int(message.text) < 36:
            await state.update_data(age=message.text)
        else:
            return await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç. (11-35)")
    else:
        return await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç. (11-35)")
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≥—Å', reply_markup=await kb.cancel())
    await UpdateAnket.voice.set()


async def Update_anketa_4(message: types.Message, state: FSMContext):
    await state.update_data(voice=message.voice.file_id)
    user_data = await state.get_data()
    name = user_data.get("name")
    age = user_data["age"]
    voice = user_data["voice"]
    await message.answer_voice(voice, caption=f"<b>{name}</b>, {age}")
    await message.answer('–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=await kb.save())
    await UpdateAnket.confirm.set()


async def save_anketa(message: types.Message, state: FSMContext):
    await message.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–¥
    id = message.from_user.id
    name = (await state.get_data('name')).get('name')
    voice = (await state.get_data('voice')).get('voice')
    age = (await state.get_data('age')).get('age')
    username = message.from_user.username
    date = await get_date(message)
    user_data = [id, name, voice, age, username, date]
    await sq_bd.update(user_data)
    await state.finish()  # –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∏—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await message.answer('–ì–ª–∞–≤–Ω–∞—è', reply_markup=await kb.home())
    await Home.menu.set()  # –°–Ω–æ–≤–∞ –∑–∞–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ


################################################################################################# OFF ANKET ####################


async def off_anketa(message: types.Message, state: FSMContext):
    await message.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –≤ –±–¥ –Ω–∞ 0 –∏–ª–∏ False
    await message.answer('–ì–ª–∞–≤–Ω–∞—è', reply_markup=await kb.home())
    await Home.menu.set()  # –°–Ω–æ–≤–∞ –∑–∞–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# ############################################################  Profile View  #########
async def own_profile(state, message):
    user_data = await state.get_data()
    profile = user_data["profiles"][user_data["profile_num"]]
    profile_id = int(profile[0])
    return message.from_user.id == profile_id


async def check_last_profile(state, message):
    user_data = await state.get_data()
    if user_data["profile_num"] == (user_data["profiles_count"]):
        if message.text == '‚ù§Ô∏è':
            liked_profile = user_data["profiles"][user_data["profile_num"] - 1][0]
            await sq_bd.add_like(message, liked_profile)
            await message.answer("–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!")
        await message.answer("–ì–ª–∞–≤–Ω–∞—è", reply_markup=await kb.home())
        return True
    return False


async def profile_view_warning(message: types.Message, state: FSMContext):
    text = """‚ùóÔ∏è –ü–æ–º–Ω–∏, —á—Ç–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ª—é–¥–∏ –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Å–µ–±—è –∑–∞ –¥—Ä—É–≥–∏—Ö.
–ë–æ—Ç –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º. 
 
 –ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫."""

    if await sq_bd.check_id(message.from_user.id):
        await state.finish()
        age = (await sq_bd.get_user(message.from_user.id))[3]
        profiles = sq_bd.get_filtered_users(age=age)
        profiles_count = len(profiles)
        random.shuffle(profiles) # –ó–∞—Ä–∞–Ω–¥–æ–º–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á—Ç–æ–±—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –ø–æ–ø–∞–¥–∞–ª–∏—Å—å —Ä–∞–Ω–¥–æ–º—ã. –ú–Ω–µ –ª–µ–Ω—å –¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å, —á—Ç–æ –æ–Ω —Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ –Ω–µ—Ç)
        print(profiles)
        await state.update_data(profiles=profiles)
        await state.update_data(profiles_count=profiles_count)
        await state.update_data(profile_num=0)
        await message.answer(text=text, reply_markup=await kb.profile_warning())
        await ViewProfiles.view.set()
    else:
        await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Ç–µ–±–µ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"',
                             reply_markup=await kb.anketa())
        await Anketa.anketa.set()


async def profile_view(message: types.Message, state: FSMContext):
    if await check_last_profile(state, message):
        return await Home.menu.set()
    user_data = await state.get_data()
    if message.text == '‚ù§Ô∏è':
        liked_profile = user_data["profiles"][user_data["profile_num"] - 1][0]
        await sq_bd.add_like(message, liked_profile)  # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –∞–≤—Ç–æ—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
        await message.answer("–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        if await own_profile(state, message):
            profiles_num = user_data["profile_num"] + 1
            await state.update_data(profile_num=profiles_num)
            return await message.answer("–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ", reply_markup=await kb.profile_warning())
        profile = user_data["profiles"][user_data["profile_num"]]
        profile_id, profile_name, profile_voice, profile_age = profile[0], profile[1], profile[2], profile[3]
        caption = f"{profile_name}, {profile_age}\n\n<b>@bot_username</b>"
        await message.answer_voice(voice=profile_voice, caption=caption, reply_markup=await kb.profile_view())
    elif message.text == 'üëé':
        if await own_profile(state, message):
            profiles_num = user_data["profile_num"] + 1
            await state.update_data(profile_num=profiles_num)
            return await message.answer("–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ", reply_markup=await kb.profile_warning())
        profile = user_data["profiles"][user_data["profile_num"]]
        profile_id, profile_name, profile_voice, profile_age = profile[0], profile[1], profile[2], profile[3]
        caption = f"{profile_name}, {profile_age}\n\n<b>@bot_username</b>"
        await message.answer_voice(voice=profile_voice, caption=caption, reply_markup=await kb.profile_view())
    elif message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        if await own_profile(state, message):
            profiles_num = user_data["profile_num"] + 1
            await state.update_data(profile_num=profiles_num)
            return await message.answer("–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ", reply_markup=await kb.profile_warning())
        profile = user_data["profiles"][user_data["profile_num"]]
        profile_id, profile_name, profile_voice, profile_age = profile[0], profile[1], profile[2], profile[3]
        caption = f"{profile_name}, {profile_age}\n\n<b>@bot_username</b>"
        await message.answer_voice(voice=profile_voice, caption=caption, reply_markup=await kb.profile_view())
    profiles_num = user_data["profile_num"] + 1
    await state.update_data(profile_num=profiles_num)

    print(user_data["profile_num"])


# ############################################################  Likes View  #########


async def likes_view_warning(message: types.Message, state: FSMContext):
    likers = await sq_bd.get_likers(message.from_user.id)
    if not await sq_bd.check_id(message.from_user.id):
        await Home.menu.set()
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É")
        return await message.answer("<b>–ì–ª–∞–≤–Ω–∞—è</b>", reply_markup=await kb.home())
    if (likers is None) or (likers == 'None'):
        await Home.menu.set()
        await message.answer("–ü–æ–∫–∞ –ª–∞–π–∫–æ–≤ –Ω–µ—Ç, –∑–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ")
        return await message.answer("<b>–ì–ª–∞–≤–Ω–∞—è</b>", reply_markup=await kb.home())
    if True: print(
        "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")  # –¢—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å
    await ViewLikes.warning.set()
    await state.update_data(likers=likers)
    await state.update_data(likers_count=len(likers))

    text = """‚ùóÔ∏è –ü–æ–º–Ω–∏, —á—Ç–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ª—é–¥–∏ –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Å–µ–±—è –∑–∞ –¥—Ä—É–≥–∏—Ö.
–ë–æ—Ç –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º. 
 
 –ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫."""
    await message.answer(text=text, reply_markup=await kb.profile_warning())


async def likes_view(message: types.Message, state: FSMContext):
    await ViewLikes.view.set()
    user_data = await state.get_data()
    likers = user_data["likers"]
    print(likers)

    if (likers is None) or (likers == 'None'):
        if message.text == '‚ù§Ô∏è':
            print("–ü–µ—Ä–≤—ã–π —Å–ª—É—á–∞–π –ª–∞–π–∫–∞")
            own_profile_name = (await sq_bd.get_user(message.from_user.id))[1]
            last_profile_id, last_profile_name = user_data["previous_liker"]
            await sq_bd.del_like(message.from_user.id, last_profile_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É —Ç–æ–º—É, –∫—Ç–æ –ø–µ—Ä–≤—ã–π –ª–∞–π–∫–Ω—É–ª
            await bot.send_message(last_profile_id,
                                   f'–ï—Å—Ç—å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è: <a href="tg://openmessage?user_id={message.from_user.id}">{own_profile_name}</a>')
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É —Ç–æ–º—É, –∫—Ç–æ –æ–¥–æ–±—Ä–∏–ª —Å–∏–º–ø–∞—Ç–∏—é
            await message.answer(
                f'–û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—èüòä\n–ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—èüëâ <a href="tg://openmessage?user_id={last_profile_id}">{last_profile_name}</a>')
        elif message.text == 'üëé':
            print("–ü–µ—Ä–≤—ã–π —Å–ª—É—á–∞–π –¥–∏–∑–ª–∞–π–∫–∞")
            own_profile_name = (await sq_bd.get_user(message.from_user.id))[1]
            last_profile_id, last_profile_name = user_data["previous_liker"]
            await sq_bd.del_like(message.from_user.id, last_profile_id)
        await message.answer("–í—Å–µ –ª–∞–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã")
        await message.answer("<b>–ì–ª–∞–≤–Ω–∞—è</b>", reply_markup=await kb.home())
        return await Home.menu.set()

    profile = await sq_bd.get_user(likers[0])
    profile_id, profile_name, profile_voice, profile_age = profile[0], profile[1], profile[2], profile[3]
    await sq_bd.del_like(message.from_user.id, profile_id)
    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        if len(likers) == 1:
            likers = None
        else:
            likers = likers[1:]
        await state.update_data(likers=likers)
        caption = f"–ï—Å—Ç—å —Å–∏–º–ø–∞—Ç–∏—è:\n\n{profile_name}, {profile_age}"
        await state.update_data(previous_liker=(profile_id, profile_name))
        return await message.answer_voice(voice=profile_voice, caption=caption, reply_markup=await kb.likers_view())

    elif message.text == '‚ù§Ô∏è':
        if len(likers) == 1:
            likers = None
        else:
            likers = likers[1:]
        await state.update_data(likers=likers)
        own_profile_name = (await sq_bd.get_user(message.from_user.id))[1]
        user_data = await state.get_data()
        last_profile_id, last_profile_name = user_data["previous_liker"]
        await bot.send_message(last_profile_id,
                               f'–ï—Å—Ç—å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\n–°—Å—ã–ª–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: <a '
                               f'href="tg://openmessage?user_id={message.from_user.id}">{own_profile_name}</a>')
        await message.answer(
            f'–û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—èüòä\n–ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è, –≤–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤üëâ<a '
            f'href="tg://openmessage?user_id={last_profile_id}">{last_profile_name}</a>')
        caption = f"–ï—Å—Ç—å —Å–∏–º–ø–∞—Ç–∏—è:\n\n{profile_name}, {profile_age}"
        await state.update_data(previous_liker=(profile_id, profile_name))
        return await message.answer_voice(voice=profile_voice, caption=caption, reply_markup=await kb.likers_view())
    elif message.text == 'üëé':
        if len(likers) == 1:
            likers = None
        else:
            likers = likers[1:]
        await state.update_data(likers=likers)
        caption = f"–ï—Å—Ç—å —Å–∏–º–ø–∞—Ç–∏—è:\n\n{profile_name}, {profile_age}"
        await state.update_data(previous_liker=(profile_id, profile_name))
        return await message.answer_voice(voice=profile_voice, caption=caption, reply_markup=await kb.likers_view())
    elif message.text == 'üí§':
        await Home.menu.set()
        return await message.answer("<b>–ì–ª–∞–≤–Ω–∞—è</b>", reply_markup=await kb.home())


# ################################################################################################# REGISTRATORS #######################
# –•–æ—Ç–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –ø–µ—Ä–µ–∫–∏–Ω—É—Ç—å, –Ω–µ –∑–Ω–∞—é, —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(home, commands="home", state="*")
    dp.register_message_handler(anketa, commands="my_profile", state="*")
    dp.register_message_handler(anketa, Text(equals="–ú–æ—è –∞–Ω–∫–µ—Ç–∞", ignore_case=True), state="*")
    dp.register_message_handler(off_anketa, Text(equals="–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É", ignore_case=True), state=Home.menu)
    dp.register_message_handler(off_anketa, commands="off_anket", state=Home.menu)


def register_updateAnket_handlers(dp: Dispatcher):
    dp.register_message_handler(home, Text(contains=["–ù–∞–∑–∞–¥", "–û—Ç–º–µ–Ω–∞", "0"], ignore_case=True), state="*")
    dp.register_message_handler(Update_anketa_1,
                                Text(equals="–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", ignore_case=True), state=Anketa.anketa)
    dp.register_message_handler(Update_anketa_2, state=UpdateAnket.name)
    dp.register_message_handler(Update_anketa_3, state=UpdateAnket.age)
    dp.register_message_handler(Update_anketa_4, content_types=types.ContentType.VOICE, state=UpdateAnket.voice)
    dp.register_message_handler(save_anketa, Text(equals="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), state=UpdateAnket.confirm)


def register_ProfileView(dp: Dispatcher):
    dp.register_message_handler(profile_view_warning, Text(equals="–°–ª—É—à–∞—Ç—å", ignore_case=True), state="*")
    dp.register_message_handler(profile_view, Text(equals="‚ù§Ô∏è"), state=ViewProfiles.view)
    dp.register_message_handler(profile_view, Text(equals='üëé'), state=ViewProfiles.view)
    dp.register_message_handler(home, Text(equals='üí§'), state=ViewProfiles.view)
    dp.register_message_handler(profile_view, Text(equals="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"), state=ViewProfiles.view)


def register_LikersView(dp: Dispatcher):
    dp.register_message_handler(likes_view_warning, Text(equals="–°–∏–º–ø–∞—Ç–∏–∏", ignore_case=True), state=Home.menu)
    dp.register_message_handler(likes_view_warning, commands=['my_likers'], state='*')
    dp.register_message_handler(likes_view, Text(equals="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", ignore_case=True), state=ViewLikes.warning)
    dp.register_message_handler(likes_view, Text(equals="‚ù§Ô∏è"), state=ViewLikes.view)
    dp.register_message_handler(likes_view, Text(equals='üëé'), state=ViewLikes.view)
    dp.register_message_handler(home, Text(equals='üí§'), state=ViewLikes.view)


def newStart(dp: Dispatcher):
    dp.register_message_handler(home, Text(equals="‚ù§Ô∏è"), state='*')
    dp.register_message_handler(home, Text(equals='üëé'), state='*')
    dp.register_message_handler(home, Text(equals='üí§'), state='*')
    dp.register_message_handler(home, Text(equals="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", ignore_case=True), state='*')

register_LikersView(dp)
register_updateAnket_handlers(dp)
register_handlers(dp)
register_ProfileView(dp)

# newStart –í—Å–µ–≥–¥–∞ –≤ –∫–æ–Ω—Ü–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞, –∫–æ–≥–¥–∞ —Å–±—Ä–æ—Å—è—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ï—Å–ª–∏ –±—É–¥–µ—Ç –≤—ã—à–µ –¥—Ä—É–≥–∏—Ö,
# —Ç–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å, –∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é.
newStart(dp)